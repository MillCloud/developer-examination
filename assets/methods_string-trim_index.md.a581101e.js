import{_ as s,c as n,o as a,a as p}from"./app.08b52d60.js";const m=JSON.parse('{"title":"去除字符串两边子串","description":"","frontmatter":{},"headers":[],"relativePath":"methods/string-trim/index.md","lastUpdated":1673235177000}'),l={name:"methods/string-trim/index.md"},e=p(`<h1 id="去除字符串两边子串" tabindex="-1">去除字符串两边子串 <a class="header-anchor" href="#去除字符串两边子串" aria-hidden="true">#</a></h1><p>传入字符串 <code>string</code>，可选择传入子串 <code>substring</code>，不传入 <code>substring</code> 时 <code>substring</code> 默认为一个空格。返回去除 <code>string</code> 两边的 <code>substring</code> 的字符串。不能直接修改传入的参数。</p><p>示例 1：</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#c9d1d9;">输入：string = &#39; abc  &#39;</span></span>
<span class="line"><span style="color:#c9d1d9;">输出：&#39;abc&#39;</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>示例 2：</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#c9d1d9;">输入：string = &#39;-_-abc-_--_-&#39;, substring = &#39;-_-&#39;</span></span>
<span class="line"><span style="color:#c9d1d9;">输出：&#39;abc&#39;</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>示例 3：</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#c9d1d9;">输入：string = &#39;-_-abc-_--_-&#39;, substring = &#39;-&#39;</span></span>
<span class="line"><span style="color:#c9d1d9;">输出：&#39;_-abc-_--_&#39;</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><a href="./index.ts" download="string-trim">点击下载 TypeScript 文件</a></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">function</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">stringTrim</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">string</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">string</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">substring</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39; &#39;</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">string</span><span style="color:#C9D1D9;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">export</span><span style="color:#C9D1D9;"> { stringTrim };</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="./index.js" download="string-trim">点击下载 JavaScript 文件</a></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">/**</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">{string}</span><span style="color:#8B949E;"> </span><span style="color:#C9D1D9;">string</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">{string}</span><span style="color:#8B949E;"> </span><span style="color:#C9D1D9;">substring</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@returns</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">{string}</span></span>
<span class="line"><span style="color:#8B949E;"> */</span></span>
<span class="line"><span style="color:#FF7B72;">function</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">stringTrim</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">string</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">substring</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39; &#39;</span><span style="color:#C9D1D9;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">export</span><span style="color:#C9D1D9;"> { stringTrim };</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,12),r=[e];function o(t,c,i,d,b,y){return a(),n("div",null,r)}const g=s(l,[["render",o]]);export{m as __pageData,g as default};
